//Write a Program to implement Kruskal’s algorithm to find
minimum spanning tree of a user defined graph. Use Adjacency
List to represent a graph.

#include <stdio.h>
#include <stdlib.h>

// Structure to represent an edge
typedef struct {
    int src, dest, weight;
} Edge;

// Structure to represent a graph
typedef struct {
    int V, E;    // Number of vertices and edges
    Edge* edges; // Array of edges
} Graph;

// A structure to represent a subset for Union-Find
typedef struct {
    int parent;
    int rank;
} Subset;

// Function to create a graph with V vertices and E edges
Graph* createGraph(int V, int E) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->V = V;
    graph->E = E;
    graph->edges = (Edge*)malloc(E * sizeof(Edge));
    return graph;
}

// A function to find the parent of an element (with path compression)
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i) {
        subsets[i].parent = find(subsets, subsets[i].parent);
    }
    return subsets[i].parent;
}

// A function to do union of two subsets (with union by rank)
void Union(Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);
    
    // Union by rank
    if (subsets[rootX].rank < subsets[rootY].rank) {
        subsets[rootX].parent = rootY;
    } else if (subsets[rootX].rank > subsets[rootY].rank) {
        subsets[rootY].parent = rootX;
    } else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

// A function to compare two edges (used for sorting edges)
int compareEdges(const void* a, const void* b) {
    Edge* edgeA = (Edge*)a;
    Edge* edgeB = (Edge*)b;
    return edgeA->weight - edgeB->weight;
}

// Function to implement Kruskal’s Algorithm
void kruskalMST(Graph* graph) {
    int V = graph->V;
    Edge* result = (Edge*)malloc((V - 1) * sizeof(Edge)); // Array to store the MST
    int e = 0; // Count of edges in MST
    int i = 0; // Index variable for sorted edges

    // Step 1: Sort all the edges in non-decreasing order of their weight
    qsort(graph->edges, graph->E, sizeof(graph->edges[0]), compareEdges);

    // Create V subsets and initialize them
    Subset* subsets = (Subset*)malloc(V * sizeof(Subset));
    for (i = 0; i < V; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    // Step 2: Pick the smallest edge and check if it forms a cycle with the MST formed so far
    i = 0;
    while (e < V - 1) {
        Edge next_edge = graph->edges[i++];

        int x = find(subsets, next_edge.src);
        int y = find(subsets, next_edge.dest);

        // If including this edge does not cause a cycle, include it in the result
        if (x != y) {
            result[e++] = next_edge;
            Union(subsets, x, y);
        }
    }

    // Print the MST
    printf("Following are the edges in the MST:\n");
    int mst_weight = 0;
    for (i = 0; i < e; i++) {
        printf("%d -- %d == %d\n", result[i].src, result[i].dest, result[i].weight);
        mst_weight += result[i].weight;
    }
    printf("Weight of MST: %d\n", mst_weight);

    // Free allocated memory
    free(result);
    free(subsets);
}

int main() {
    int V = 4;  // Number of vertices in the graph
    int E = 5;  // Number of edges in the graph

    Graph* graph = createGraph(V, E);

    // Add edges to the graph (src, dest, weight)
    graph->edges[0].src = 0;
    graph->edges[0].dest = 1;
    graph->edges[0].weight = 10;

    graph->edges[1].src = 0;
    graph->edges[1].dest = 2;
    graph->edges[1].weight = 6;

    graph->edges[2].src = 0;
    graph->edges[2].dest = 3;
    graph->edges[2].weight = 5;

    graph->edges[3].src = 1;
    graph->edges[3].dest = 3;
    graph->edges[3].weight = 15;

    graph->edges[4].src = 2;
    graph->edges[4].dest = 3;
    graph->edges[4].weight = 4;

    // Call Kruskal’s algorithm to find the MST
    kruskalMST(graph);

    // Free allocated memory for the graph
    free(graph->edges);
    free(graph);

    return 0;
}
