//WAP to implement Insertion sort and Merge Sort on 1D array of
Student structure (contains student_name, student_roll_no,
total_marks), with key as student_roll_no. And count the number
of swap performed.

#include <stdio.h>
#include <string.h>

typedef struct {
    char student_name[50];
    int student_roll_no;
    float total_marks;
} Student;

// Function to print the array of Student structures
void printStudentArray(Student students[], int n) {
    printf("Student Details:\n");
    for (int i = 0; i < n; i++) {
        printf("Name: %s, Roll No: %d, Total Marks: %.2f\n", students[i].student_name, students[i].student_roll_no, students[i].total_marks);
    }
}

// Function to swap two Student structures and count swaps
void swap(Student *a, Student *b, int *swap_count) {
    Student temp = *a;
    *a = *b;
    *b = temp;
    (*swap_count)++;
}

// Insertion Sort Implementation
void insertionSort(Student arr[], int n, int *swap_count) {
    for (int i = 1; i < n; i++) {
        Student key = arr[i];
        int j = i - 1;

        // Move elements of arr[0..i-1] that are greater than key to one position ahead
        while (j >= 0 && arr[j].student_roll_no > key.student_roll_no) {
            arr[j + 1] = arr[j];
            j--;
            (*swap_count)++;
        }
        arr[j + 1] = key;
    }
}

// Merge Sort Helper Functions
void merge(Student arr[], int left, int mid, int right, int *swap_count) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Create temporary arrays
    Student leftArr[n1], rightArr[n2];

    // Copy data to temp arrays leftArr[] and rightArr[]
    for (int i = 0; i < n1; i++) leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; j++) rightArr[j] = arr[mid + 1 + j];

    // Merge the temp arrays back into arr[left..right]
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i].student_roll_no <= rightArr[j].student_roll_no) {
            arr[k] = leftArr[i];
            i++;
        } else {
            arr[k] = rightArr[j];
            j++;
        }
        k++;
        (*swap_count)++;
    }

    // Copy the remaining elements of leftArr[], if any
    while (i < n1) {
        arr[k] = leftArr[i];
        i++;
        k++;
        (*swap_count)++;
    }

    // Copy the remaining elements of rightArr[], if any
    while (j < n2) {
        arr[k] = rightArr[j];
        j++;
        k++;
        (*swap_count)++;
    }
}

void mergeSort(Student arr[], int left, int right, int *swap_count) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid, swap_count);
        mergeSort(arr, mid + 1, right, swap_count);
        merge(arr, left, mid, right, swap_count);
    }
}

// Main Function
int main() {
    int n;

    printf("Enter the number of students: ");
    scanf("%d", &n);

    Student students[n];

    // Input Student Details
    for (int i = 0; i < n; i++) {
        printf("Enter details for student %d:\n", i + 1);
        printf("Name: ");
        scanf("%s", students[i].student_name);
        printf("Roll No: ");
        scanf("%d", &students[i].student_roll_no);
        printf("Total Marks: ");
        scanf("%f", &students[i].total_marks);
    }

    // Insertion Sort
    Student insertionSortedStudents[n];
    memcpy(insertionSortedStudents, students, sizeof(students));
    int insertionSwapCount = 0;
    insertionSort(insertionSortedStudents, n, &insertionSwapCount);
    printf("\nStudents sorted by Insertion Sort (by student_roll_no):\n");
    printStudentArray(insertionSortedStudents, n);
    printf("Number of swaps in Insertion Sort: %d\n", insertionSwapCount);

    // Merge Sort
    Student mergeSortedStudents[n];
    memcpy(mergeSortedStudents, students, sizeof(students));
    int mergeSwapCount = 0;
    mergeSort(mergeSortedStudents, 0, n - 1, &mergeSwapCount);
    printf("\nStudents sorted by Merge Sort (by student_roll_no):\n");
    printStudentArray(mergeSortedStudents, n);
    printf("Number of swaps in Merge Sort: %d\n", mergeSwapCount);

    return 0;
}
