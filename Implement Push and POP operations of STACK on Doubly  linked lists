 Implement Push and POP operations of STACK on Doubly 
linked lists
#include <stdio.h>
#include <stdlib.h>

// Definition of a doubly linked list node
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Stack structure to maintain the top of the stack
struct Stack {
    struct Node* top;
};

// Function to create a new node with given data
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// Function to initialize the stack
void initializeStack(struct Stack* stack) {
    stack->top = NULL;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return (stack->top == NULL);
}

// Push operation: Add an element to the top of the stack
void push(struct Stack* stack, int data) {
    struct Node* newNode = createNode(data);
    if (stack->top == NULL) {
        stack->top = newNode;
    } else {
        newNode->next = stack->top;
        stack->top->prev = newNode;
        stack->top = newNode;
    }
    printf("Pushed %d onto the stack\n", data);
}

// Pop operation: Remove an element from the top of the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty, cannot pop\n");
        return -1; // Return a value indicating the stack is empty
    }

    struct Node* temp = stack->top;
    int poppedValue = temp->data;
    stack->top = stack->top->next;

    if (stack->top != NULL) {
        stack->top->prev = NULL;
    }

    free(temp); // Free the memory of the popped node
    printf("Popped %d from the stack\n", poppedValue);
    return poppedValue;
}

// Function to display the stack from top to bottom
void displayStack(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return;
    }
    struct Node* temp = stack->top;
    printf("Stack elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Main function to test stack operations
int main() {
    struct Stack stack;
    initializeStack(&stack);

    // Testing Push operation
    push(&stack, 10);
    push(&stack, 20);
    push(&stack, 30);
    push(&stack, 40);

    // Display stack after pushes
    displayStack(&stack);

    // Testing Pop operation
    pop(&stack);
    pop(&stack);

    // Display stack after pops
    displayStack(&stack);

    // Testing pop from empty stack
    pop(&stack);
    pop(&stack);
    pop(&stack);  // Should show error message for empty stack

    return 0;
}
