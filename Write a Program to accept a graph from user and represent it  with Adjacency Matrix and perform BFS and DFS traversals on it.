Write a Program to accept a graph from user and represent it 
with Adjacency Matrix and perform BFS and DFS traversals on it.
#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 20  // Maximum number of vertices

// Function to perform BFS traversal
void BFS(int graph[MAX_VERTICES][MAX_VERTICES], int visited[], int start, int vertices) {
    int queue[MAX_VERTICES], front = 0, rear = 0;
    visited[start] = 1;
    printf("BFS Traversal: ");
    printf("%d ", start);
    queue[rear++] = start;

    while (front != rear) {
        int node = queue[front++];
        for (int i = 0; i < vertices; i++) {
            if (graph[node][i] == 1 && !visited[i]) {
                visited[i] = 1;
                printf("%d ", i);
                queue[rear++] = i;
            }
        }
    }
    printf("\n");
}

// Function to perform DFS traversal using recursion
void DFS(int graph[MAX_VERTICES][MAX_VERTICES], int visited[], int node, int vertices) {
    visited[node] = 1;
    printf("%d ", node);

    for (int i = 0; i < vertices; i++) {
        if (graph[node][i] == 1 && !visited[i]) {
            DFS(graph, visited, i, vertices);
        }
    }
}

// Main function to input graph and perform BFS and DFS
int main() {
    int graph[MAX_VERTICES][MAX_VERTICES], visited[MAX_VERTICES] = {0};
    int vertices, edges, start, u, v;

    // Input the number of vertices and edges
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    // Initialize the graph with 0s (no edges)
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            graph[i][j] = 0;
        }
    }

    // Input the edges (undirected graph)
    printf("Enter the edges (u, v) where 0 <= u, v < %d:\n", vertices);
    for (int i = 0; i < edges; i++) {
        scanf("%d %d", &u, &v);
        graph[u][v] = 1;  // For undirected graph, also set graph[v][u] = 1
        graph[v][u] = 1;
    }

    // Display the adjacency matrix
    printf("\nAdjacency Matrix of the Graph:\n");
    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }

    // Input starting vertex for BFS and DFS
    printf("\nEnter the starting vertex for BFS and DFS: ");
    scanf("%d", &start);

    // Perform BFS
    for (int i = 0; i < vertices; i++) visited[i] = 0;  // Reset visited array
    BFS(graph, visited, start, vertices);

    // Perform DFS
    for (int i = 0; i < vertices; i++) visited[i] = 0;  // Reset visited array
    printf("DFS Traversal: ");
    DFS(graph, visited, start, vertices);
    printf("\n");

    return 0;
}
