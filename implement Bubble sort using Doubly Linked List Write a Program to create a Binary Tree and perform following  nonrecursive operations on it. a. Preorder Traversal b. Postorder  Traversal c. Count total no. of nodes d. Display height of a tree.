implement Bubble sort using Doubly Linked List Write a Program to create a Binary Tree and perform following 
nonrecursive operations on it. a. Preorder Traversal b. Postorder 
Traversal c. Count total no. of nodes d. Display height of a tree. 
#include <stdio.h>
#include <stdlib.h>
#include <stack>

// Doubly Linked List for Bubble Sort

// Define the structure for a doubly linked list node
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

// Function to insert a node at the end of the list
void appendNode(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }
}

// Function to display the list
void displayList(struct Node* head) {
    struct Node* temp = head;
    if (temp == NULL) {
        printf("List is empty\n");
        return;
    }
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Function to perform Bubble Sort on a doubly linked list
void bubbleSort(struct Node* head) {
    if (head == NULL) return;

    struct Node* i;
    struct Node* j;
    int swapped;

    do {
        swapped = 0;
        i = head;
        while (i->next != NULL) {
            j = i->next;
            if (i->data > j->data) {
                // Swap the data of nodes
                int temp = i->data;
                i->data = j->data;
                j->data = temp;
                swapped = 1;
            }
            i = i->next;
        }
    } while (swapped);
}

// Binary Tree Operations (Non-Recursive)

// Define the structure for a binary tree node
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new binary tree node
struct TreeNode* createTreeNode(int data) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function for non-recursive Preorder Traversal
void preorderTraversal(struct TreeNode* root) {
    if (root == NULL) return;

    std::stack<struct TreeNode*> stack;
    stack.push(root);

    while (!stack.empty()) {
        struct TreeNode* node = stack.top();
        stack.pop();
        printf("%d ", node->data);

        // Push right first so that left is processed first
        if (node->right) stack.push(node->right);
        if (node->left) stack.push(node->left);
    }
}

// Function for non-recursive Postorder Traversal
void postorderTraversal(struct TreeNode* root) {
    if (root == NULL) return;

    std::stack<struct TreeNode*> stack1, stack2;
    stack1.push(root);

    while (!stack1.empty()) {
        struct TreeNode* node = stack1.top();
        stack1.pop();
        stack2.push(node);

        // Push left and right nodes to stack1
        if (node->left) stack1.push(node->left);
        if (node->right) stack1.push(node->right);
    }

    while (!stack2.empty()) {
        printf("%d ", stack2.top()->data);
        stack2.pop();
    }
}

// Function to count total number of nodes in the binary tree
int countNodes(struct TreeNode* root) {
    if (root == NULL) return 0;

    std::stack<struct TreeNode*> stack;
    stack.push(root);
    int count = 0;

    while (!stack.empty()) {
        struct TreeNode* node = stack.top();
        stack.pop();
        count++;

        if (node->left) stack.push(node->left);
        if (node->right) stack.push(node->right);
    }

    return count;
}

// Function to display the height of the binary tree
int heightOfTree(struct TreeNode* root) {
    if (root == NULL) return 0;

    std::stack<std::pair<struct TreeNode*, int>> stack;
    stack.push({root, 1});
    int maxHeight = 0;

    while (!stack.empty()) {
        struct TreeNode* node = stack.top().first;
        int height = stack.top().second;
        stack.pop();

        maxHeight = (height > maxHeight) ? height : maxHeight;

        if (node->left) stack.push({node->left, height + 1});
        if (node->right) stack.push({node->right, height + 1});
    }

    return maxHeight;
}

// Main function to test both Binary Tree and Doubly Linked List operations
int main() {
    // Doubly Linked List with Bubble Sort
    struct Node* head = NULL;
    appendNode(&head, 5);
    appendNode(&head, 2);
    appendNode(&head, 9);
    appendNode(&head, 1);
    appendNode(&head, 3);

    printf("Original Doubly Linked List: ");
    displayList(head);

    // Perform Bubble Sort on the doubly linked list
    bubbleSort(head);

    printf("Sorted Doubly Linked List: ");
    displayList(head);

    // Binary Tree Operations
    struct TreeNode* root = createTreeNode(1);
    root->left = createTreeNode(2);
    root->right = createTreeNode(3);
    root->left->left = createTreeNode(4);
    root->left->right = createTreeNode(5);
    root->right->left = createTreeNode(6);
    root->right->right = createTreeNode(7);

    printf("\nPreorder Traversal: ");
    preorderTraversal(root);
    printf("\n");

    printf("Postorder Traversal: ");
    postorderTraversal(root);
    printf("\n");

    printf("Total Nodes in Binary Tree: %d\n", countNodes(root));

    printf("Height of Binary Tree: %d\n", heightOfTree(root));

    return 0;
}
