//WAP to implement Quick sort and Heap Sort on 1D array of
Employee structure (contains employee_name, emp_no,
emp_salary), with key as emp_no. And count the number of swap
performed.

#include <stdio.h>
#include <string.h>

typedef struct {
    char employee_name[50];
    int emp_no;
    float emp_salary;
} Employee;

// Function to print the array of Employee structures
void printEmployeeArray(Employee employees[], int n) {
    printf("Employee Details:\n");
    for (int i = 0; i < n; i++) {
        printf("Name: %s, Employee No: %d, Salary: %.2f\n", employees[i].employee_name, employees[i].emp_no, employees[i].emp_salary);
    }
}

// Function to swap two Employee structures and count swaps
void swap(Employee *a, Employee *b, int *swap_count) {
    Employee temp = *a;
    *a = *b;
    *b = temp;
    (*swap_count)++;
}

// Quick Sort Functions
int partition(Employee arr[], int low, int high, int *swap_count) {
    int pivot = arr[high].emp_no; // Pivot element
    int i = low - 1;

    for (int j = low; j < high; j++) {
        if (arr[j].emp_no < pivot) {
            i++;
            swap(&arr[i], &arr[j], swap_count);
        }
    }
    swap(&arr[i + 1], &arr[high], swap_count);
    return i + 1;
}

void quickSort(Employee arr[], int low, int high, int *swap_count) {
    if (low < high) {
        int pi = partition(arr, low, high, swap_count);

        quickSort(arr, low, pi - 1, swap_count);
        quickSort(arr, pi + 1, high, swap_count);
    }
}

// Heap Sort Functions
void heapify(Employee arr[], int n, int i, int *swap_count) {
    int largest = i;          // Initialize largest as root
    int left = 2 * i + 1;     // Left child
    int right = 2 * i + 2;    // Right child

    if (left < n && arr[left].emp_no > arr[largest].emp_no)
        largest = left;

    if (right < n && arr[right].emp_no > arr[largest].emp_no)
        largest = right;

    // If largest is not root
    if (largest != i) {
        swap(&arr[i], &arr[largest], swap_count);
        heapify(arr, n, largest, swap_count);
    }
}

void heapSort(Employee arr[], int n, int *swap_count) {
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i, swap_count);

    // Extract elements from heap one by one
    for (int i = n - 1; i > 0; i--) {
        swap(&arr[0], &arr[i], swap_count); // Move current root to end
        heapify(arr, i, 0, swap_count);     // Call heapify on the reduced heap
    }
}

// Main Function
int main() {
    int n;

    printf("Enter the number of employees: ");
    scanf("%d", &n);

    Employee employees[n];

    // Input Employee Details
    for (int i = 0; i < n; i++) {
        printf("Enter details for employee %d:\n", i + 1);
        printf("Name: ");
        scanf("%s", employees[i].employee_name);
        printf("Employee No: ");
        scanf("%d", &employees[i].emp_no);
        printf("Salary: ");
        scanf("%f", &employees[i].emp_salary);
    }

    // Quick Sort
    Employee quickSortedEmployees[n];
    memcpy(quickSortedEmployees, employees, sizeof(employees));
    int quickSwapCount = 0;
    quickSort(quickSortedEmployees, 0, n - 1, &quickSwapCount);
    printf("\nEmployees sorted by Quick Sort (by emp_no):\n");
    printEmployeeArray(quickSortedEmployees, n);
    printf("Number of swaps in Quick Sort: %d\n", quickSwapCount);

    // Heap Sort
    Employee heapSortedEmployees[n];
    memcpy(heapSortedEmployees, employees, sizeof(employees));
    int heapSwapCount = 0;
    heapSort(heapSortedEmployees, n, &heapSwapCount);
    printf("\nEmployees sorted by Heap Sort (by emp_no):\n");
    printEmployeeArray(heapSortedEmployees, n);
    printf("Number of swaps in Heap Sort: %d\n", heapSwapCount);

    return 0;
}
