 Write a Program to create a Binary Tree and perform 
following Nonrecursive operations on it. a. Inorder Traversal b. 
Preorder Traversal c. Display Number of Leaf Nodes d. Mirror 
Image
#include <stdio.h>
#include <stdlib.h>
#include <stack>

// Definition of a Binary Tree Node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Non-recursive Inorder Traversal
void inorderNonRecursive(struct Node* root) {
    if (root == NULL) {
        return;
    }

    // Use a stack to simulate the inorder traversal
    std::stack<struct Node*> stack;
    struct Node* current = root;

    while (current != NULL || !stack.empty()) {
        while (current != NULL) {
            stack.push(current);
            current = current->left;
        }

        current = stack.top();
        stack.pop();
        printf("%d ", current->data);

        current = current->right;
    }
}

// Non-recursive Preorder Traversal
void preorderNonRecursive(struct Node* root) {
    if (root == NULL) {
        return;
    }

    // Use a stack to simulate the preorder traversal
    std::stack<struct Node*> stack;
    stack.push(root);

    while (!stack.empty()) {
        struct Node* node = stack.top();
        stack.pop();
        printf("%d ", node->data);

        if (node->right != NULL) {
            stack.push(node->right);
        }
        if (node->left != NULL) {
            stack.push(node->left);
        }
    }
}

// Function to count the number of leaf nodes
int countLeafNodes(struct Node* root) {
    if (root == NULL) {
        return 0;
    }

    int count = 0;
    std::stack<struct Node*> stack;
    stack.push(root);

    while (!stack.empty()) {
        struct Node* node = stack.top();
        stack.pop();

        // If the node is a leaf node (both left and right are NULL)
        if (node->left == NULL && node->right == NULL) {
            count++;
        }

        if (node->right != NULL) {
            stack.push(node->right);
        }
        if (node->left != NULL) {
            stack.push(node->left);
        }
    }

    return count;
}

// Function to create a mirror image of the tree
void mirror(struct Node* root) {
    if (root == NULL) {
        return;
    }

    // Use a stack to simulate the mirroring process
    std::stack<struct Node*> stack;
    stack.push(root);

    while (!stack.empty()) {
        struct Node* node = stack.top();
        stack.pop();

        // Swap the left and right children
        struct Node* temp = node->left;
        node->left = node->right;
        node->right = temp;

        // Push the children to the stack
        if (node->left != NULL) {
            stack.push(node->left);
        }
        if (node->right != NULL) {
            stack.push(node->right);
        }
    }
}

// Function to display the tree (Inorder Traversal)
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

// Main function
int main() {
    struct Node* root = NULL;
    int choice, data;

    // Creating a sample binary tree
    root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    while (1) {
        printf("\nMenu:\n");
        printf("1. Inorder Traversal (Non-recursive)\n");
        printf("2. Preorder Traversal (Non-recursive)\n");
        printf("3. Count Leaf Nodes\n");
        printf("4. Mirror Image\n");
        printf("5. Display Tree (Inorder Traversal)\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Inorder Traversal (Non-recursive): ");
                inorderNonRecursive(root);
                printf("\n");
                break;
            case 2:
                printf("Preorder Traversal (Non-recursive): ");
                preorderNonRecursive(root);
                printf("\n");
                break;
            case 3:
                printf("Number of Leaf Nodes: %d\n", countLeafNodes(root));
                break;
            case 4:
                mirror(root);
                printf("Mirror image created.\n");
                break;
            case 5:
                printf("Inorder Traversal of the Tree: ");
                inorder(root);
                printf("\n");
                break;
            case 6:
                printf("Exiting program...\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
