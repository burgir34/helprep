//WAP to implement Merge Sort and Heap Sort on 1D array of
Faculty structure (contains faculty_name, faculty_ID,
subject_codes, class_names), with key as faculty_ID. And count the
number of swap performed.

#include <stdio.h>
#include <string.h>

#define MAX_SUBJECTS 5
#define MAX_CLASSES 5

typedef struct {
    char faculty_name[50];
    int faculty_ID;
    char subject_codes[MAX_SUBJECTS][10];
    char class_names[MAX_CLASSES][10];
} Faculty;

// Function to print the array of Faculty structures
void printFacultyArray(Faculty faculty[], int n) {
    printf("Faculty Details:\n");
    for (int i = 0; i < n; i++) {
        printf("Name: %s, ID: %d\n", faculty[i].faculty_name, faculty[i].faculty_ID);
    }
}

// Merge Sort Functions
void merge(Faculty arr[], int left, int mid, int right, int *comparisons) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    Faculty L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        (*comparisons)++;
        if (L[i].faculty_ID <= R[j].faculty_ID) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
    }

    while (i < n1) {
        arr[k++] = L[i++];
    }

    while (j < n2) {
        arr[k++] = R[j++];
    }
}

void mergeSort(Faculty arr[], int left, int right, int *comparisons) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid, comparisons);
        mergeSort(arr, mid + 1, right, comparisons);

        merge(arr, left, mid, right, comparisons);
    }
}

// Heap Sort Functions
void heapify(Faculty arr[], int n, int i, int *swaps) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left].faculty_ID > arr[largest].faculty_ID) {
        largest = left;
    }

    if (right < n && arr[right].faculty_ID > arr[largest].faculty_ID) {
        largest = right;
    }

    if (largest != i) {
        // Swap and count the swap
        Faculty temp = arr[i];
        arr[i] = arr[largest];
        arr[largest] = temp;
        (*swaps)++;

        // Recursively heapify the affected subtree
        heapify(arr, n, largest, swaps);
    }
}

void heapSort(Faculty arr[], int n, int *swaps) {
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i, swaps);
    }

    for (int i = n - 1; i > 0; i--) {
        // Swap and count the swap
        Faculty temp = arr[0];
        arr[0] = arr[i];
        arr[i] = temp;
        (*swaps)++;

        heapify(arr, i, 0, swaps);
    }
}

// Main Function
int main() {
    int n;

    printf("Enter the number of faculty members: ");
    scanf("%d", &n);

    Faculty faculty[n];

    // Input Faculty Details
    for (int i = 0; i < n; i++) {
        printf("Enter details for faculty %d:\n", i + 1);
        printf("Name: ");
        scanf("%s", faculty[i].faculty_name);
        printf("Faculty ID: ");
        scanf("%d", &faculty[i].faculty_ID);
        // Dummy input for subject codes and class names
        for (int j = 0; j < MAX_SUBJECTS; j++) {
            sprintf(faculty[i].subject_codes[j], "Sub%d", j + 1);
        }
        for (int k = 0; k < MAX_CLASSES; k++) {
            sprintf(faculty[i].class_names[k], "Class%d", k + 1);
        }
    }

    // Merge Sort
    Faculty mergeSortedFaculty[n];
    memcpy(mergeSortedFaculty, faculty, sizeof(faculty));
    int comparisons = 0;
    mergeSort(mergeSortedFaculty, 0, n - 1, &comparisons);
    printf("\nFaculty sorted by Merge Sort (by faculty_ID):\n");
    printFacultyArray(mergeSortedFaculty, n);
    printf("Number of comparisons in Merge Sort: %d\n", comparisons);

    // Heap Sort
    Faculty heapSortedFaculty[n];
    memcpy(heapSortedFaculty, faculty, sizeof(faculty));
    int swaps = 0;
    heapSort(heapSortedFaculty, n, &swaps);
    printf("\nFaculty sorted by Heap Sort (by faculty_ID):\n");
    printFacultyArray(heapSortedFaculty, n);
    printf("Number of swaps in Heap Sort: %d\n", swaps);

    return 0;
}
