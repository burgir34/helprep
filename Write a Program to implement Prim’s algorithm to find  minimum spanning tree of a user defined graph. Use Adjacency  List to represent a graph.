 Write a Program to implement Primâ€™s algorithm to find 
minimum spanning tree of a user defined graph. Use Adjacency 
List to represent a graph.
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 20

// Structure for adjacency list node
struct Node {
    int vertex;
    int weight;
    struct Node* next;
};

// Structure for graph
struct Graph {
    int numVertices;
    struct Node* adjList[MAX_VERTICES];
};

// Min Heap structure for Prim's algorithm
struct MinHeapNode {
    int vertex;
    int key;
};

// Min Heap structure
struct MinHeap {
    int size;
    int capacity;
    int* pos; // To store the index of a vertex in the heap
    struct MinHeapNode** array;
};

// Function to create a new graph
struct Graph* createGraph(int vertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = vertices;

    for (int i = 0; i < vertices; i++) {
        graph->adjList[i] = NULL;
    }

    return graph;
}

// Function to create a new adjacency list node
struct Node* newNode(int v, int w) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->vertex = v;
    new_node->weight = w;
    new_node->next = NULL;
    return new_node;
}

// Add an edge to the graph
void addEdge(struct Graph* graph, int src, int dest, int weight) {
    struct Node* node = newNode(dest, weight);
    node->next = graph->adjList[src];
    graph->adjList[src] = node;

    node = newNode(src, weight);
    node->next = graph->adjList[dest];
    graph->adjList[dest] = node;
}

// Function to create a min heap node
struct MinHeapNode* newMinHeapNode(int v, int key) {
    struct MinHeapNode* minHeapNode = (struct MinHeapNode*)malloc(sizeof(struct MinHeapNode));
    minHeapNode->vertex = v;
    minHeapNode->key = key;
    return minHeapNode;
}

// Function to create a min heap
struct MinHeap* createMinHeap(int capacity) {
    struct MinHeap* minHeap = (struct MinHeap*)malloc(sizeof(struct MinHeap));
    minHeap->capacity = capacity;
    minHeap->size = 0;
    minHeap->pos = (int*)malloc(capacity * sizeof(int));
    minHeap->array = (struct MinHeapNode**)malloc(capacity * sizeof(struct MinHeapNode*));
    return minHeap;
}

// Swap two nodes of the heap
void swapMinHeapNode(struct MinHeapNode** a, struct MinHeapNode** b) {
    struct MinHeapNode* temp = *a;
    *a = *b;
    *b = temp;
}

// Min heapify function
void minHeapify(struct MinHeap* minHeap, int idx) {
    int smallest = idx;
    int left = 2 * idx + 1;
    int right = 2 * idx + 2;

    if (left < minHeap->size && minHeap->array[left]->key < minHeap->array[smallest]->key) {
        smallest = left;
    }
    if (right < minHeap->size && minHeap->array[right]->key < minHeap->array[smallest]->key) {
        smallest = right;
    }

    if (smallest != idx) {
        struct MinHeapNode* smallestNode = minHeap->array[smallest];
        struct MinHeapNode* idxNode = minHeap->array[idx];

        // Swap positions
        minHeap->pos[smallestNode->vertex] = idx;
        minHeap->pos[idxNode->vertex] = smallest;

        // Swap nodes
        swapMinHeapNode(&minHeap->array[smallest], &minHeap->array[idx]);

        minHeapify(minHeap, smallest);
    }
}

// Check if the min heap is empty
int isEmpty(struct MinHeap* minHeap) {
    return minHeap->size == 0;
}

// Extract the vertex with the minimum key value
struct MinHeapNode* extractMin(struct MinHeap* minHeap) {
    if (isEmpty(minHeap)) {
        return NULL;
    }

    struct MinHeapNode* root = minHeap->array[0];

    struct MinHeapNode* lastNode = minHeap->array[minHeap->size - 1];
    minHeap->array[0] = lastNode;
    minHeap->pos[root->vertex] = minHeap->size - 1;
    minHeap->pos[lastNode->vertex] = 0;

    --minHeap->size;
    minHeapify(minHeap, 0);

    return root;
}

// Decrease key value
void decreaseKey(struct MinHeap* minHeap, int v, int key) {
    int i = minHeap->pos[v];
    minHeap->array[i]->key = key;

    while (i && minHeap->array[i]->key < minHeap->array[(i - 1) / 2]->key) {
        minHeap->pos[minHeap->array[i]->vertex] = (i - 1) / 2;
        minHeap->pos[minHeap->array[(i - 1) / 2]->vertex] = i;
        swapMinHeapNode(&minHeap->array[i], &minHeap->array[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

// Print the constructed MST
void printMST(int parent[], struct Graph* graph, int vertices) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < vertices; i++) {
        struct Node* temp = graph->adjList[i];
        while (temp) {
            if (temp->vertex == parent[i]) {
                printf("%d - %d \t%d\n", parent[i], i, temp->weight);
                break;
            }
            temp = temp->next;
        }
    }
}

// Function to implement Prim's algorithm
void primMST(struct Graph* graph) {
    int vertices = graph->numVertices;

    // Initialize the key values and parent for each vertex
    int parent[vertices];
    int key[vertices];
    struct MinHeap* minHeap = createMinHeap(vertices);

    for (int v = 0; v < vertices; v++) {
        key[v] = INT_MAX;
        parent[v] = -1;
        minHeap->array[v] = newMinHeapNode(v, key[v]);
        minHeap->pos[v] = v;
    }

    key[0] = 0;
    decreaseKey(minHeap, 0, key[0]);

    minHeap->size = vertices;

    while (!isEmpty(minHeap)) {
        struct MinHeapNode* minNode = extractMin(minHeap);
        int u = minNode->vertex;

        struct Node* temp = graph->adjList[u];
        while (temp) {
            int v = temp->vertex;

            if (minHeap->pos[v] < minHeap->size && temp->weight < key[v]) {
                key[v] = temp->weight;
                parent[v] = u;
                decreaseKey(minHeap, v, key[v]);
            }
            temp = temp->next;
        }
    }

    printMST(parent, graph, vertices);
}

// Main function to input the graph and perform Prim's algorithm
int main() {
    int vertices, edges, u, v, weight;

    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    struct Graph* graph = createGraph(vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    printf("Enter the edges (u, v, weight) for each edge:\n");
    for (int i = 0; i < edges; i++) {
        scanf("%d %d %d", &u, &v, &weight);
        addEdge(graph, u, v, weight);
    }

    primMST(graph);

    return 0;
}
