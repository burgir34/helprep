 WAP to merge two sorted Doubly linked lists and display 
ther result.
#include <stdio.h>
#include <stdlib.h>

// Definition of a doubly linked list node
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Function to create a new node with given data
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the doubly linked list
void insertAtEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
}

// Function to display the doubly linked list
void displayList(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Function to merge two sorted doubly linked lists
struct Node* mergeSortedLists(struct Node* head1, struct Node* head2) {
    // Create a dummy node to help with merging
    struct Node* dummy = createNode(0);
    struct Node* tail = dummy;
    
    // Merge the lists
    while (head1 != NULL && head2 != NULL) {
        if (head1->data < head2->data) {
            tail->next = head1;
            head1->prev = tail;
            head1 = head1->next;
        } else {
            tail->next = head2;
            head2->prev = tail;
            head2 = head2->next;
        }
        tail = tail->next;
    }
    
    // If there are any remaining nodes in list1 or list2
    if (head1 != NULL) {
        tail->next = head1;
        head1->prev = tail;
    }
    if (head2 != NULL) {
        tail->next = head2;
        head2->prev = tail;
    }
    
    // Return the merged list starting from the next of the dummy node
    struct Node* mergedHead = dummy->next;
    free(dummy);  // Free the dummy node
    return mergedHead;
}

// Main function to test the merging of two sorted doubly linked lists
int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    // Insert nodes into the first sorted list
    insertAtEnd(&list1, 1);
    insertAtEnd(&list1, 3);
    insertAtEnd(&list1, 5);
    insertAtEnd(&list1, 7);

    // Insert nodes into the second sorted list
    insertAtEnd(&list2, 2);
    insertAtEnd(&list2, 4);
    insertAtEnd(&list2, 6);
    insertAtEnd(&list2, 8);

    printf("List 1: ");
    displayList(list1);

    printf("List 2: ");
    displayList(list2);

    // Merge the two sorted lists
    struct Node* mergedList = mergeSortedLists(list1, list2);

    // Display the merged list
    printf("Merged List: ");
    displayList(mergedList);

    return 0;
}
